---
defaultBaseImageVersion: latest
stages:
- name: Build Stage
  inputs:
  - type: git
    branch: master
    service: ${REPO}
  triggers:
  - type: commit
  properties:
  - name: IMAGE_NAME
    value: ${IMAGE_NAME}
    type: text
  - name: KUBECTL_VERSION
    value: v1.13.3
    type: text
  - name: KUBECTL_DOWNLOAD_URL
    value: https://storage.googleapis.com/kubernetes-release/release/v1.13.3/bin/linux/amd64/kubectl
    type: text
  jobs:
  - name: Build
    type: builder
    build_type: cr
    artifact_dir: ''
    target:
      region_id: ${REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${IMAGE_NAME}
    script: |-
      #!/bin/bash
      echo "Doing Java build"
      echo "DevOps sets LOG_DIR env var, which is used during Java build to check if server started, so unsetting"
      echo "LOG_DIR: ${LOG_DIR}"
      LOG_DIR_TEMP=$LOG_DIR
      unset LOG_DIR
      echo "LOG_DIR has been unset: ${LOG_DIR}"

      export JAVA_HOME=$JAVA8_HOME
      mvn -N io.takari:maven:wrapper -Dmaven=3.5.0
      ./mvnw install -DskipTests

      echo "Java build finished, setting LOG_DIR back to original"
      LOG_DIR=$LOG_DIR_TEMP
      echo "LOG_DIR: ${LOG_DIR}"

      mkdir downloads
      PATH="downloads:$PATH"
      echo "kubectl version"
      kubectl version --client

      echo "source the container_build script to run in current shell"
      SCRIPTS_DIR=.bluemix/scripts # SCRIPTS_DIR is used in container_build.sh
      source ${SCRIPTS_DIR}/container_build.sh

      if  [[ -f post_build.sh ]]; then
        chmod +x post_build.sh;
        echo "executing the post_build script";
        sh post_build.sh;
      else
        echo "the post_build script does not exist";
      fi
- name: Deploy Stage
  inputs:
  - type: job
    stage: Build Stage
    job: Build
  properties:
  - name: buildProperties
    value: build.properties
    type: file
  - name: IMAGE_NAME
    value: ${IMAGE_NAME}
    type: text
  - name: CLUSTER_NAMESPACE
    value: ${CLUSTER_NAMESPACE}
    type: text
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    target:
      application: ${CF_APP}
      api_key: ${API_KEY}
      region_id: ${REGION_ID}
      kubernetes_cluster: ${KUBE_CLUSTER_NAME}
    script: |-
      #!/bin/bash
      export PATH="downloads:$PATH"
      echo "source the kube_deploy script to run in current shell"
      source .bluemix/scripts/kube_deploy.sh
      echo "export IP_ADDR=${IP_ADDR}" >> kube_vars.sh
      echo "export PORT=${PORT}" >> kube_vars.sh
- name: Health Stage
  inputs:
  - type: job
    stage: Build Stage
    job: Build
  triggers:
  - type: stage
  permission:
    execute: TOOLCHAIN_ADMINS
  properties:
  - name: CLUSTER_NAMESPACE
    value: ${CLUSTER_NAMESPACE}
    type: text
  - name: buildProperties
    value: build.properties
    type: file
  jobs:
  - name: Test
    type: deployer
    deploy_type: kubernetes
    target:
      region_id: ${REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${KUBE_CLUSTER_NAME}
    script: |-
      export PATH="downloads:$PATH"
      export HEALTH_ENDPOINT=health
      export HEALTH_ENDPOINT=actuator/$HEALTH_ENDPOINT
      kubectl get ksvc/${IMAGE_NAME} -o json | jq '.status.url'
      TEMP_URL=$( kubectl get ksvc/${IMAGE_NAME} -o json | jq '.status.url' )
      TEMP_URL=${TEMP_URL%\"} # remove end quote
      TEMP_URL=${TEMP_URL#\"} # remove beginning quote
      export APPLICATION_URL=$TEMP_URL

      if [ "$(curl -is $APPLICATION_URL/$HEALTH_ENDPOINT --connect-timeout 3 --max-time 5 --retry 2 --retry-max-time 30 | head -n 1 | grep 200)" != "" ]; then
        echo "Successfully reached health endpoint at $APPLICATION_URL/$HEALTH_ENDPOINT"
        echo "====================================================================="
      else
        echo "Could not reach health endpoint: $APPLICATION_URL/$HEALTH_ENDPOINT"
        exit 1;
      fi;
