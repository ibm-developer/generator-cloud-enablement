---
defaultBaseImageVersion: latest
stages:
- name: Build Stage
  inputs:
  - type: git
    branch: master
    service: ${REPO}
  {{#has deployment.type 'CF'}}
  properties:
  - name: CF_HOSTNAME
    value: "${CF_HOSTNAME}"
    type: text
  - name: CF_DOMAIN
    value: "${CF_DOMAIN}"
    type: text
  {{/has}}
  {{#if config.triggersType}}
  triggers:
  - type: {{config.triggersType}}
  {{/if}}
  {{#has deployment.type 'Kube'}}
  properties:
  {{#has deployment.kubeDeploymentType 'HELM'}}
  - name: CHART_NAME
    value: ${CHART_NAME}
    type: text
  {{/has}}
  {{#has deployment.kubeDeploymentType 'KNATIVE'}}
  - name: IMAGE_NAME
    value: ${IMAGE_NAME}
    type: text
  {{/has}}
  - name: KUBECTL_VERSION
    value: v1.13.3
    type: text
  - name: KUBECTL_DOWNLOAD_URL
    value: https://storage.googleapis.com/kubernetes-release/release/v1.13.3/bin/linux/amd64/kubectl
    type: text
  {{/has}}
  jobs:
  - name: Build
    type: builder
    {{#missing deployment.type 'Kube'}}
    {{#each config.buildJobProps}}
    {{@key}}: {{{this}}}
    {{/each}}
    {{/missing}}
    {{#has deployment.type 'Kube'}}
    build_type: cr
    artifact_dir: ''
    target:
      region_id: ${REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    {{#has deployment.kubeDeploymentType 'HELM'}}
    image_name: ${CHART_NAME}
    {{/has}}
    {{#has deployment.kubeDeploymentType 'KNATIVE'}}
    image_name: ${IMAGE_NAME}
    {{/has}}
    script: |-
      #!/bin/bash
      {{#if config.javaBuildScriptContent}}
      echo "Doing Java build"
      echo "DevOps sets LOG_DIR env var, which is used during Java build to check if server started, so unsetting"
      echo "LOG_DIR: ${LOG_DIR}"
      LOG_DIR_TEMP=$LOG_DIR
      unset LOG_DIR
      echo "LOG_DIR has been unset: ${LOG_DIR}"

      {{{config.javaBuildScriptContent}}}

      echo "Java build finished, setting LOG_DIR back to original"
      LOG_DIR=$LOG_DIR_TEMP
      echo "LOG_DIR: ${LOG_DIR}"
      {{/if}}
      {{#if config.swift}}
      echo "Modifying Dockerfiles for Swift Kubernetes DevOps Toolchain deployment"
      echo "RUN cd /swift-project && /swift-utils/tools-utils.sh build release" >> Dockerfile-tools
      sed -i 's/COPY.*/COPY --from=0 \/swift-project .\/swift-project/' Dockerfile
      cat Dockerfile >> Dockerfile-tools
      mv Dockerfile-tools Dockerfile
      {{/if}}

      mkdir downloads
      PATH="downloads:$PATH"
      {{#has deployment.kubeDeploymentType 'HELM'}}
      if [ "$(echo "$(kubectl version --client)" | grep $KUBECTL_VERSION)" == "" ]; then
        echo "Downloading kubectl v$KUBECTL_VERSION"
        curl -LO "$KUBECTL_DOWNLOAD_URL"
        chmod +x kubectl
        mv kubectl downloads/kubectl
      fi
      {{/has}}
      echo "kubectl version"
      kubectl version --client

      echo "source the container_build script to run in current shell"
      SCRIPTS_DIR={{{deployment.scriptsDir}}} # SCRIPTS_DIR is used in container_build.sh
      source ${SCRIPTS_DIR}/container_build.sh

      if  [[ -f post_build.sh ]]; then
        chmod +x post_build.sh;
        echo "executing the post_build script";
        sh post_build.sh;
      else
        echo "the post_build script does not exist";
      fi
    {{/has}}
- name: Deploy Stage
  inputs:
  - type: job
    stage: Build Stage
    job: Build
  {{#has deployment.type 'CF'}}
  properties:
  - name: CF_HOSTNAME
    value: "${CF_HOSTNAME}"
    type: text
  - name: CF_DOMAIN
    value: "${CF_DOMAIN}"
    type: text
  {{/has}}
  {{#has deployment.type 'Kube'}}
  properties:
  - name: buildProperties
    value: build.properties
    type: file
  {{#has deployment.kubeDeploymentType 'HELM'}}
  - name: CHART_NAME
    value: ${CHART_NAME}
    type: text
  {{/has}}
  {{#has deployment.kubeDeploymentType 'KNATIVE'}}
  - name: IMAGE_NAME
    value: ${IMAGE_NAME}
    type: text
  {{/has}}
  - name: CLUSTER_NAMESPACE
    value: ${CLUSTER_NAMESPACE}
    type: text
  {{/has}}
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    target:
      {{#has deployment.type 'CFEE'}}
      cfee_env: ${CFEE_ENV}
      cfee_host: ${CFEE_HOST}
      organization: ${CF_ORGANIZATION}
      space: ${CF_SPACE}
      {{/has}}
      {{#has deployment.type 'CF'}}
      region_id: ${REGION_ID}
      organization: ${CF_ORGANIZATION}
      space: ${CF_SPACE}
      {{/has}}
      application: ${CF_APP}
      api_key: ${API_KEY}
      {{#has deployment.kubeDeploymentType 'HELM'}}
      region_id: ${REGION_ID}
      kubernetes_cluster: ${KUBE_CLUSTER_NAME}
    script: |-
      #!/bin/bash
      TILLER_VERSION=$(helm version -s | sed 's/.*v\([0-9\.]*\).*/\1/g')
      CLIENT_VERSION=$(helm version -c | sed 's/.*v\([0-9\.]*\).*/\1/g')
      echo "TILLER_VERSION"
      echo $TILLER_VERSION
      helm version
      HELM_DOWNLOAD_URL=https://kubernetes-helm.storage.googleapis.com/
      if [ "$TILLER_VERSION" != "$CLIENT_VERSION" ]; then
        echo "Downloading helm v$TILLER_VERSION"
        curl -SsL "$HELM_DOWNLOAD_URL"helm-v"$TILLER_VERSION"-linux-amd64.tar.gz -o "helm-v${TILLER_VERSION}-linux-amd64.tar.gz"
        tar -zxvf helm-v${TILLER_VERSION}-linux-amd64.tar.gz
        chmod 700 linux-amd64/helm
        mv linux-amd64/helm downloads/helm
        chmod +x downloads/helm
      fi

      echo "helm version"
      helm version

      export PATH="downloads:$PATH"
      echo "source the kube_deploy script to run in current shell"
      source {{{deployment.scriptsDir}}}/kube_deploy.sh
      echo "export IP_ADDR=${IP_ADDR}" >> kube_vars.sh
      echo "export PORT=${PORT}" >> kube_vars.sh
      {{/has}}
    {{#has deployment.kubeDeploymentType 'KNATIVE'}}
      region_id: ${REGION_ID}
      kubernetes_cluster: ${KUBE_CLUSTER_NAME}
    script: |-
      #!/bin/bash
      export PATH="downloads:$PATH"
      echo "source the kube_deploy script to run in current shell"
      source {{{deployment.scriptsDir}}}/kube_deploy.sh
      echo "export IP_ADDR=${IP_ADDR}" >> kube_vars.sh
      echo "export PORT=${PORT}" >> kube_vars.sh
    {{/has}}
    {{#has deployment.type 'CF'}}
    script: |-
      #!/bin/bash
      {{#if config.pushCommand}}
      {{{config.pushCommand}}}
      {{else}}
      cf push "${CF_APP}" --hostname "${CF_HOSTNAME}" -d "${CF_DOMAIN}"
      {{/if}}
      # cf logs "${CF_APP}" --recent
    {{/has}}
    {{#has deployment.type 'CFEE'}}
    script: |-
      #!/bin/bash
      {{#if config.pushCommand}}
      {{{config.pushCommand}}}
      {{else}}
      cf push "${CF_APP}" --hostname "${CF_HOSTNAME}" -d "${CF_DOMAIN}"
      {{/if}}
      # cf logs "${CF_APP}" --recent
    {{/has}}
{{#missing deployment.type 'CFEE'}}
- name: Health Stage
  inputs:
  - type: job
    stage: Build Stage
    job: Build
  triggers:
  - type: stage
  permission:
    execute: TOOLCHAIN_ADMINS
  {{#has deployment.type 'CF'}}
  properties:
  - name: CF_HOSTNAME
    value: "${CF_HOSTNAME}"
    type: text
  - name: CF_DOMAIN
    value: "${CF_DOMAIN}"
    type: text
  {{/has}}
  {{#has deployment.type 'Kube'}}
  properties:
  - name: CLUSTER_NAMESPACE
    value: ${CLUSTER_NAMESPACE}
    type: text
  - name: buildProperties
    value: build.properties
    type: file
  jobs:
  - name: Test
    type: deployer
    deploy_type: kubernetes
    target:
      region_id: ${REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${KUBE_CLUSTER_NAME}
    script: |-
      export PATH="downloads:$PATH"
      {{#has deployment.kubeDeploymentType 'KNATIVE'}}
      kubectl get ksvc/${IMAGE_NAME} -o json | jq '.status.url'
      TEMP_URL=$( kubectl get ksvc/${IMAGE_NAME} -o json | jq '.status.url' )
      TEMP_URL=${TEMP_URL%\"} # remove end quote
      TEMP_URL=${TEMP_URL#\"} # remove beginning quote
      export APPLICATION_URL=$TEMP_URL

      if [ "$(curl -is $APPLICATION_URL/health --connect-timeout 3 --max-time 5 --retry 2 --retry-max-time 30 | head -n 1 | grep 200)" != "" ]; then
        echo "Successfully reached health endpoint at $APPLICATION_URL/health"
        echo "====================================================================="
      else
        echo "Could not reach health endpoint: $APPLICATION_URL/health"
        exit 1;
      fi;
      {{/has}}
      {{#has deployment.kubeDeploymentType 'HELM'}}
      IP_ADDR=$(ibmcloud cs workers ${PIPELINE_KUBERNETES_CLUSTER_NAME} | grep normal | head -n 1 | awk '{ print $2 }')
      if [[ "${CLUSTER_NAMESPACE}" != "default" ]]; then
        {{#if deployment.hasMongo}}
        RELEASE_NAME=${IMAGE_NAME}-application-service
        {{else}}
        RELEASE_NAME="${CLUSTER_NAMESPACE}-${IMAGE_NAME}"
        {{/if}}
      else
        {{#if deployment.hasMongo}}
        RELEASE_NAME=${IMAGE_NAME}-application-service
        {{else}}
        RELEASE_NAME=${IMAGE_NAME}
        {{/if}}
      fi
      echo "RELEASE_NAME: $RELEASE_NAME"

      PORT=$(kubectl get services --namespace ${CLUSTER_NAMESPACE} | grep ${RELEASE_NAME} | sed 's/[^:]*:\([0-9]*\).*/\1/g')
      if [ "$(curl -is http://$IP_ADDR:$PORT/health --connect-timeout 3 --max-time 5 --retry 2 --retry-max-time 30 | head -n 1 | grep 200)" != "" ]; then
        echo "Successfully reached health endpoint at http://$IP_ADDR:$PORT/health"
        echo "====================================================================="
      else
        echo "Could not reach health endpoint: http://$IP_ADDR:$PORT/health"
        exit 1;
      fi;
      {{/has}}

  {{/has}}
  {{#has deployment.type 'CF'}}
  {{#unless manifest.host}}
  jobs:
  - name: Test
    type: deployer
    deploy_type: cf
    target:
      region_id: ${REGION_ID}
      organization: ${CF_ORGANIZATION}
      space: ${CF_SPACE}
      application: ${CF_APP}
      api_key: ${API_KEY}
    script: |-
      export CF_ENDPOINT=$(cf app $CF_APP | grep running)
      if [[ "$CF_ENDPOINT" != "" ]]; then
        echo "Your application is up anding running at http://{{manifest.host}}.{{manifest.domain}}"
        echo "====================================================================="
      else
        echo "There was a problem with starting your application"
        exit 1;
      fi
  {{else}}
  jobs:
  - name: Test
    type: tester
    script: |-
      #!/bin/sh
      apk add --no-cache curl
      if [ "$(curl -is http://{{manifest.host}}.{{manifest.domain}}/health  --connect-timeout 3 --max-time 5 --retry 3 --retry-max-time 30 | head -n 1 | grep 200)" != "" ]; then
        echo "Successfully reached health endpoint at http://{{manifest.host}}.{{manifest.domain}}/health"
        echo "====================================================================="
      else
        echo "Could not reach health endpoint: http://{{manifest.host}}.{{manifest.domain}}/health"
        exit 1;
      fi;
    test_type: customimage
    docker_image: alpine
  {{/unless}}
  {{/has}}
{{/missing}}
