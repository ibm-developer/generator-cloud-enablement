stages:
- name: Build Stage
  inputs:
  - type: git
    branch: master
    service: ${REPO}
  {{#if config.triggersType}}
  triggers:
  - type: {{config.triggersType}}
  {{/if}}
  {{#has deployment.type 'Kube'}}
  properties:
  - name: CHART_NAME
    value: ${CHART_NAME}
    type: text
  {{/has}}
  jobs:
  - name: Build
    type: builder
    {{#missing deployment.type 'Kube'}}
    {{#each config.buildJobProps}}
    {{@key}}: {{{this}}}
    {{/each}}
    {{/missing}}
    {{#has deployment.type 'Kube'}}
    build_type: cr
    artifact_dir: ''
    target:
      region_id: ${REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CHART_NAME}
    script: |-
      #!/bin/bash
      {{#if config.javaBuildScriptContent}}
      echo "Doing Java build"
      echo "DevOps sets LOG_DIR env var, which is used during Java build to check if server started, so unsetting"
      echo "LOG_DIR: ${LOG_DIR}"
      LOG_DIR_TEMP=$LOG_DIR
      unset LOG_DIR
      echo "LOG_DIR has been unset: ${LOG_DIR}"

      {{{config.javaBuildScriptContent}}}

      echo "Java build finished, setting LOG_DIR back to original"
      LOG_DIR=$LOG_DIR_TEMP
      echo "LOG_DIR: ${LOG_DIR}"
      {{/if}}
      {{#if config.swift}}
      echo "Modifying Dockerfiles for Swift Kubernetes DevOps Toolchain deployment"
      echo "RUN cd /swift-project && /swift-utils/tools-utils.sh build release" >> Dockerfile-tools
      sed -i 's/COPY.*/COPY --from=0 \/swift-project .\/swift-project/' Dockerfile
      cat Dockerfile >> Dockerfile-tools
      mv Dockerfile-tools Dockerfile
      {{/if}}

      echo "source the container_build script to run in current shell"
      SCRIPTS_DIR={{{deployment.scriptsDir}}} # SCRIPTS_DIR is used in container_build.sh
      source ${SCRIPTS_DIR}/container_build.sh

      if  [[ -f post_build.sh ]]; then
        chmod +x post_build.sh;
        echo "executing the post_build script";
        sh post_build.sh;
      else
        echo "the post_build script does not exist";
      fi
    {{/has}}
- name: Deploy Stage
  inputs:
  - type: job
    stage: Build Stage
    job: Build
  {{#has deployment.type 'Kube'}}
  properties:
  - name: buildProperties
    value: build.properties
    type: file
  - name: CHART_NAME
    value: ${CHART_NAME}
    type: text
  - name: CLUSTER_NAMESPACE
    value: ${CLUSTER_NAMESPACE}
    type: text
  - name: IMAGE_PULL_SECRET_NAME
    value: ${IMAGE_PULL_SECRET_NAME}
    type: text
  - name: IMAGE_REGISTRY_TOKEN
    value: ${IMAGE_REGISTRY_TOKEN}
    type: text
  {{/has}}
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${REGION_ID}
      organization: ${CF_ORGANIZATION}
      space: ${CF_SPACE}
      application: ${CF_APP}
    {{#has deployment.type 'Kube'}}
      api_key: ${API_KEY}
      kubernetes_cluster: ${KUBE_CLUSTER_NAME}
    script: |-
      #!/bin/bash
      echo "source the kube_deploy script to run in current shell"
      source {{{deployment.scriptsDir}}}/kube_deploy.sh
    {{/has}}
    {{#has deployment.type 'CF'}}
    script: |-
      #!/bin/bash
      {{#if config.pushCommand}}
      {{{config.pushCommand}}}
      {{else}}
      cf push "${CF_APP}"
      {{/if}}
      # cf logs "${CF_APP}" --recent
    {{/has}}
